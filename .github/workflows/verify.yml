# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Latest commit

env:
  CACHE_VERSION: 2
  DEFAULT_PYTHON: "3.13"
  PRE_COMMIT_HOME: ~/.cache/pre-commit
  VENV: venv

on:
  schedule:
    - cron: "2 4 * * 0" # weekly
  workflow_dispatch:
  push:
  #pull_request:

jobs:
  # Prepare default python version environment
  prepare:
    runs-on: ubuntu-latest
    name: Prepare
    steps:
      - name: Check out committed code
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Create or reuse cache
        id: cache-reuse
        uses: ./.github/actions/restore-venv
        with:
          python-version: ${{ steps.python.outputs.python-version }}
          cache-key: ${{ runner.os }}-venv-cache-${{ env.CACHE_VERSION }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('pyproject.toml', 'requirements_test.txt', '.pre-commit-config.yaml') }}
          venv-directory: ${{ env.VENV }}
          precommit-home: ${{ env.PRE_COMMIT_HOME }}
          fail-on-miss: false # First time create cache (if not already exists)
      - name: Create Python virtual environment
        run: |
          pip install virtualenv --upgrade
          python -m venv venv
          . venv/bin/activate
          pip install uv
          uv pip install -U pip setuptools wheel
          # 20220124 Mimic setup_test.sh
          uv pip install --upgrade -r requirements_commit.txt -r requirements_test.txt -c https://raw.githubusercontent.com/home-assistant/core/dev/homeassistant/package_constraints.txt -r https://raw.githubusercontent.com/home-assistant/core/dev/requirements_test.txt -r https://raw.githubusercontent.com/home-assistant/core/dev/requirements_test_pre_commit.txt
          uv pip install --upgrade pytest-asyncio
      - name: Install pre-commit dependencies
        run: |
          . venv/bin/activate
          pre-commit install-hooks

  ruff:
    runs-on: ubuntu-latest
    name: Ruff check and force
    needs: prepare
    steps:
      - name: Check out committed code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Create or reuse cache
        id: cache-reuse
        uses: ./.github/actions/restore-venv
        with:
          python-version: ${{ steps.python.outputs.python-version }}
          cache-key: ${{ runner.os }}-venv-cache-${{ env.CACHE_VERSION }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('pyproject.toml', 'requirements_test.txt', '.pre-commit-config.yaml') }}
          venv-directory: ${{ env.VENV }}
          precommit-home: ${{ env.PRE_COMMIT_HOME }}
      - name: Ruff (check)
        run: |
          . venv/bin/activate
          ruff check plugwise_usb/ tests/
      - name: If needed, commit ruff changes to the pull request
        if: failure()
        run: |
          . venv/bin/activate
          ruff format plugwise_usb/ tests/
          git config --global user.name 'autoruff'
          git config --global user.email 'plugwise_usb@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.PAT_CT_PYPLUSB }}@github.com/$GITHUB_REPOSITORY
          git checkout $GITHUB_HEAD_REF
          git commit -am "fixup: ${GITHUB_REF##*/} Python code reformatted using Ruff"
          git push origin ${GITHUB_REF##*/}

  commitcheck:
    runs-on: ubuntu-latest
    name: Check commit
    needs:
      - prepare
      - ruff
      - shellcheck
      - dependencies_check
    steps:
      - name: Check out committed code
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Create or reuse cache
        id: cache-reuse
        uses: ./.github/actions/restore-venv
        with:
          python-version: ${{ steps.python.outputs.python-version }}
          cache-key: ${{ runner.os }}-venv-cache-${{ env.CACHE_VERSION }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('pyproject.toml', 'requirements_test.txt', '.pre-commit-config.yaml') }}
          venv-directory: ${{ env.VENV }}
          precommit-home: ${{ env.PRE_COMMIT_HOME }}
      - name: Verify commit
        run: |
          . venv/bin/activate
          pre-commit run --show-diff-on-failure --color=always --all-files --hook-stage manual pylint
      - name: Biome lint
        run: |
          . venv/bin/activate
          mkdir -p ./tmp && curl -sL "https://github.com/biomejs/biome/releases/latest/download/biome-linux-x64" -o ./tmp/biome && chmod +x ./tmp/biome
          pre-commit run --show-diff-on-failure --color=always --all-files --hook-stage manual biome
      - name: Lint markdown files
        run: |
          . venv/bin/activate
          pre-commit run --show-diff-on-failure --color=always --all-files --hook-stage manual markdownlint

  pytest:
    runs-on: ubuntu-latest
    name: Run pytest using Python ${{ matrix.python-version }}
    needs: 
      - prepare
    strategy:
      matrix: 
        python-version: ["3.13"]
    steps:
      - name: Check out committed code
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Create or reuse cache
        id: cache-reuse
        uses: ./.github/actions/restore-venv
        with:
          python-version: ${{ matrix.python-version }}
          cache-key: ${{ runner.os }}-venv-cache-${{ env.CACHE_VERSION }}-${{ matrix.python--version }}-${{ hashFiles('pyproject.toml', 'requirements_test.txt', '.pre-commit-config.yaml') }}
          venv-directory: ${{ env.VENV }}
          precommit-home: ${{ env.PRE_COMMIT_HOME }}
          fail-on-miss: false # First time create cache (if not already exists)
      - name: Run all tests
        run: |
          . venv/bin/activate
          pytest --log-level info tests/*.py --cov='.'
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: .coverage
          if-no-files-found: error
          include-hidden-files: true

  mypy:
    if: false  # disables the job --> "Code is not up to par for mypy, skipping - see #171"
    runs-on: ubuntu-latest
    name: Run mypy
    needs: 
      - prepare
      - pytest
    steps:
      - name: Check out committed code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Create or reuse cache
        id: cache-reuse
        uses: ./.github/actions/restore-venv
        with:
          python-version: ${{ steps.python.outputs.python-version }}
          cache-key: ${{ runner.os }}-venv-cache-${{ env.CACHE_VERSION }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('pyproject.toml', 'requirements_test.txt', '.pre-commit-config.yaml') }}
          venv-directory: ${{ env.VENV }}
          precommit-home: ${{ env.PRE_COMMIT_HOME }}
      - name: Run mypy
        run: |
          . venv/bin/activate
          uv pip list | grep -i mypy
          mypy plugwise_usb/

  # Check shellscripts
  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
      - name: Check out committed code
        uses: actions/checkout@v4
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master

  # Check for missing python dependencies
  dependencies_check:
    runs-on: ubuntu-latest
    name: Dependency
    steps:
      - name: Check out committed code
        uses: actions/checkout@v4
      - name: Run dependency checker
        run: scripts/dependencies_check.sh debug

  coverage:
    name: Process test coverage
    runs-on: ubuntu-latest
    needs: 
      - prepare
      - pytest
    steps:
      - name: Check out committed code
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Create or reuse cache
        id: cache-reuse
        uses: ./.github/actions/restore-venv
        with:
          python-version: ${{ steps.python.outputs.python-version }}
          cache-key: ${{ runner.os }}-venv-cache-${{ env.CACHE_VERSION }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('pyproject.toml', 'requirements_test.txt', '.pre-commit-config.yaml') }}
          venv-directory: ${{ env.VENV }}
          precommit-home: ${{ env.PRE_COMMIT_HOME }}
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
      - name: Combine coverage results
        run: |
          . venv/bin/activate
          coverage combine coverage*/.coverage*
          #coverage report --fail-under=80  ## plugwise is at 94, set to 80 for plugwise_usb
          echo "***"
          echo "***"
          echo "Coverage is not up to par, skipping"
          echo "***"
          echo "***"
          coverage xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-publishing:
    name: Build and publish Python üêç distributions üì¶ to TestPyPI
    runs-on: ubuntu-latest
    needs: [coverage, mypy]
    steps:
      - name: Check out committed code
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Create or reuse cache
        id: cache-reuse
        uses: ./.github/actions/restore-venv
        with:
          python-version: ${{ steps.python.outputs.python-version }}
          cache-key: ${{ runner.os }}-venv-cache-${{ env.CACHE_VERSION }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('pyproject.toml', 'requirements_test.txt', '.pre-commit-config.yaml') }}
          venv-directory: ${{ env.VENV }}
          precommit-home: ${{ env.PRE_COMMIT_HOME }}
      - name: Install pypa/build
        run: uv pip install build --user
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Publish distribution üì¶ to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        continue-on-error: true
        with:
          password: ${{ secrets.testpypi_token }}
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true

  complexity:
    name: Process test complexity
    runs-on: ubuntu-latest
    needs: 
      - prepare
      - coverage
    steps:
      - name: Check out committed code
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Create or reuse cache
        id: cache-reuse
        uses: ./.github/actions/restore-venv
        with:
          python-version: ${{ steps.python.outputs.python-version }}
          cache-key: ${{ runner.os }}-venv-cache-${{ env.CACHE_VERSION }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('pyproject.toml', 'requirements_test.txt', '.pre-commit-config.yaml') }}
          venv-directory: ${{ env.VENV }}
          precommit-home: ${{ env.PRE_COMMIT_HOME }}
      - name: Run complexity report (click to view details)
        run: |
          . venv/bin/activate
          echo "Showing complexity higher or equal to 'C'"
          radon cc plugwise/ tests/ -s -nc --no-assert
